package dev.momostudios.coldsweat.core.event;

import dev.momostudios.coldsweat.ColdSweat;
import dev.momostudios.coldsweat.api.temperature.modifier.*;
import dev.momostudios.coldsweat.api.temperature.modifier.block.*;
import dev.momostudios.coldsweat.common.world.BlockEffectEntries;
import dev.momostudios.coldsweat.common.world.TempModifierEntries;
import dev.momostudios.coldsweat.api.event.TempModifierEvent;
import net.minecraft.core.BlockPos;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.world.WorldEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.ModList;
import net.minecraftforge.fml.common.Mod;
import dev.momostudios.coldsweat.config.ColdSweatConfig;
import dev.momostudios.coldsweat.util.math.CSMath;

import java.util.List;

@Mod.EventBusSubscriber
public class InitTempModifiers
{
    // Trigger TempModifierEvent.Init
    @SubscribeEvent
    public static void registerTempModifiers(WorldEvent.Load event) {
        TempModifierEntries.getEntries().flush();
        BlockEffectEntries.getEntries().flush();
        MinecraftForge.EVENT_BUS.post(new TempModifierEvent.Init.Modifier());
        MinecraftForge.EVENT_BUS.post(new TempModifierEvent.Init.Block());
    }

    // Register BlockEffects
    @SubscribeEvent
    public static void registerBlockEffects(TempModifierEvent.Init.Block event)
    {
        try
        {
            event.addBlockEffect(new LavaBlockEffect());
            event.addBlockEffect(new FurnaceBlockEffect());
            event.addBlockEffect(new CampfireBlockEffect());
            event.addBlockEffect(new FireBlockEffect());
            event.addBlockEffect(new IceBlockEffect());
            event.addBlockEffect(new IceboxBlockEffect());
            event.addBlockEffect(new BoilerBlockEffect());
            event.addBlockEffect(new SoulFireBlockEffect());
            event.addBlockEffect(new SoulCampfireBlockEffect());
            event.addBlockEffect(new NetherPortalBlockEffect());
            event.addBlockEffect(new MagmaBlockEffect());

            // Add BlockEffects auto-generated by config
            for (List<Object> effectBuilder : ColdSweatConfig.getInstance().getBlockEffects())
            {
                try
                {
                    // Check if required fields are present
                    if (!(effectBuilder.get(0) instanceof String)
                    || !(effectBuilder.get(1) instanceof Double || effectBuilder.get(1) instanceof Integer)
                    || !(effectBuilder.get(2) instanceof Double || effectBuilder.get(2) instanceof Integer))
                    {
                        throw new Exception("Invalid BlockEffect format");
                    }

                    String[] blockIDs = ((String) effectBuilder.get(0)).split(",");

                    double temp;
                    try { temp = (double) effectBuilder.get(1); } catch (Exception e) { temp = (int) effectBuilder.get(1); }

                    double range;
                    try { range = (double) effectBuilder.get(2); } catch (Exception e) { range = (int) effectBuilder.get(2); }

                    boolean weaken;
                    try { weaken = (boolean) effectBuilder.get(3); } catch (Exception e) { weaken = true; }

                    double maxTemp;
                    try { maxTemp = (double) effectBuilder.get(4); } catch (Exception e) { maxTemp = Double.MAX_VALUE; }

                    double minTemp;
                    try { minTemp = (double) effectBuilder.get(5); } catch (Exception e) { minTemp = -Double.MAX_VALUE; }

                    final double finalTemp = temp;
                    final double finalRange = range;
                    final boolean finalWeaken = weaken;
                    final double finalMaxTemp = maxTemp;
                    final double finalMinTemp = minTemp;

                    event.addBlockEffect(
                            new BlockEffect()
                            {
                                @Override
                                public double getTemperature(Player player, BlockState state, BlockPos pos, double distance)
                                {
                                    return finalWeaken ? CSMath.blend(finalTemp, 0, distance, 0.5, finalRange) : finalTemp;
                                }

                                @Override
                                public boolean hasBlock(BlockState block)
                                {
                                    for (String id : blockIDs)
                                    {
                                        if (block.getBlock().getRegistryName().toString().equals(id))
                                            return true;
                                    }
                                    return false;
                                }

                                @Override
                                public double maxEffect()
                                {
                                    return finalMaxTemp;
                                }

                                @Override
                                public double minEffect()
                                {
                                    return finalMinTemp;
                                }
                            });
                }
                catch (Exception e)
                {
                    ColdSweat.LOGGER.warn("Invalid configuration for BlockEffects in config file \"main.toml\"");
                    e.printStackTrace();
                    break;
                }
            }
        }
        catch (Exception e) {
            ColdSweat.LOGGER.error("Registering BlockEffects failed!");
            e.printStackTrace();
        }
    }

    // Register TempModifiers
    @SubscribeEvent
    public static void registerTempModifiers(TempModifierEvent.Init.Modifier event)
    {
        String sereneseasons = "dev.momostudios.coldsweat.api.temperature.modifier.compat.SereneSeasonsTempModifier";
        String betterweather = "dev.momostudios.coldsweat.api.temperature.modifier.compat.BetterWeatherTempModifier";

        try
        {
            event.addModifier(new BlockTempModifier());
            event.addModifier(new BiomeTempModifier());
            event.addModifier(new DepthTempModifier());
            event.addModifier(new InsulationTempModifier());
            event.addModifier(new MountTempModifier());
            event.addModifier(new TimeTempModifier());
            event.addModifier(new WaterskinTempModifier());
            event.addModifier(new HellLampTempModifier());
            if (ModList.get().isLoaded("sereneseasons")) event.addModifier((TempModifier) Class.forName(sereneseasons).getConstructor().newInstance());
            //if (ModList.get().isLoaded("betterweather")) event.addModifier((TempModifier) Class.forName(betterweather).newInstance());
            event.addModifier(new WaterTempModifier());
            event.addModifier(new HearthTempModifier());
            event.addModifier(new FoodTempModifier());

            if (ModList.get().isLoaded("sereneseasons") && ModList.get().isLoaded("betterweather"))
                ColdSweat.LOGGER.warn("Multiple seasons mods are present! This may cause issues!");
        }
        catch (Exception e) {
            ColdSweat.LOGGER.error("Registering TempModifiers failed!");
            e.printStackTrace();
        }
    }
}
